C51 COMPILER V8.08   LCD                                                                   04/21/2016 02:22:52 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "Includes.h"
   2          
   3          void ToggleEpinOfLCD(void)
   4          {
   5   1              E = 1;                // Give a pulse on E pin
   6   1              __delay_us(E_Delay);  // so that LCD can latch the
   7   1              E = 0;                // data from data bus
   8   1              __delay_us(E_Delay);    
   9   1      }
  10          
  11          void WriteDataToLCD(char t)
  12          {
  13   1         RS = 1;             // This is data
  14   1      
  15   1         P0 &= 0x0F;             // Make P2.4 to P2.7 zero
  16   1         P0 |= (t&0xF0);     // Write Upper nibble of data
  17   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
  18   1      
  19   1         P0 &= 0x0F;             // Make P2.4 to P2.7 zero
  20   1         P0 |= ((t<<4)&0xF0);// Write Lower nibble of data
  21   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
  22   1      }
  23          void gotolcd(unsigned char i)
  24          {
  25   1              i |= 0x80;// Set DD-RAM Address Command
  26   1              WriteCommandToLCD(i);
  27   1      }
  28          
  29          void WriteCommandToLCD(int z)
  30          {
  31   1         RS = 0;             // This is command
  32   1      
  33   1         P0 &= 0x0F;             // Make P2.4 to P2.7 zero
  34   1         P0 |= (z&0xF0);     // Write Upper nibble of data
  35   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
  36   1      
  37   1         P0 &= 0x0F;             // Make P2.4 to P2.7 zero
  38   1         P0 |= ((z<<4)&0xF0);// Write Lower nibble of data
  39   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
  40   1      }
  41          
  42          void InitLCD(void)
  43          {
  44   1              RS = 0;                 // Make pin zero
  45   1              E  = 0;                 // Make Pin zero                                        
  46   1      
  47   1        ///////////// Reset process from datasheet /////////
  48   1           __delay_us(15000);
  49   1      
  50   1               P0 &= 0x0F;               // Make P2.4 to P2.7 zero
  51   1               P0 |= 0x30;               // Write 0x3
  52   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
  53   1      
  54   1           __delay_us(4500);
  55   1      
C51 COMPILER V8.08   LCD                                                                   04/21/2016 02:22:52 PAGE 2   

  56   1               P0 &= 0x0F;               // Make P2.4 to P2.7 zero
  57   1               P0 |= 0x30;               // Write 0x3
  58   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
  59   1      
  60   1           __delay_us(300);
  61   1      
  62   1               P0 &= 0x0F;               // Make P2.4 to P2.7 zero
  63   1               P0 |= 0x30;               // Write 0x3
  64   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
  65   1      
  66   1           __delay_us(650);
  67   1      
  68   1               P0 &= 0x0F;               // Make P2.4 to P2.7 zero
  69   1               P0 |= 0x20;               // Write 0x2
  70   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
  71   1      
  72   1               __delay_us(650);
  73   1      
  74   1        /////////////////////////////////////////////////////
  75   1         WriteCommandToLCD(0x28);    //function set
  76   1         WriteCommandToLCD(0x0c);    //display on,cursor off,blink off
  77   1         WriteCommandToLCD(0x01);    //clear display
  78   1         WriteCommandToLCD(0x06);    //entry mode, set increment
  79   1      }
  80          
  81          
  82          
  83          void ClearLCDScreen(void)       // Clear the Screen and return cursor to zero position
  84          {
  85   1              WriteCommandToLCD(0x01);    // Clear the screen
  86   1              __delay_us(2000);           // Delay for cursor to return at zero position
  87   1      }
  88          
  89          
  90          void WriteStringToLCD(const char *s)
  91          {
  92   1              while(*s)       
  93   1                      WriteDataToLCD(*s++); 
  94   1      }
  95          
  96          
  97          
  98          void DisplayTimeToLCD( unsigned char* pTimeArray )   // Displays time in HH:MM:SS AM/PM format
  99          {
 100   1              gotolcd(0);      // Move cursor to zero location and clear screen
 101   1      
 102   1              // Display Hour
 103   1              WriteDataToLCD( (pTimeArray[2]/10)+0x30 );
 104   1              WriteDataToLCD( (pTimeArray[2]%10)+0x30 );
 105   1      
 106   1              //Display ':'
 107   1              WriteDataToLCD(':');
 108   1      
 109   1              //Display Minutes
 110   1              WriteDataToLCD( (pTimeArray[1]/10)+0x30 );
 111   1              WriteDataToLCD( (pTimeArray[1]%10)+0x30 );
 112   1      
 113   1              //Display ':'
 114   1              WriteDataToLCD(':');
 115   1      
 116   1              //Display Seconds
 117   1              WriteDataToLCD( (pTimeArray[0]/10)+0x30 );
C51 COMPILER V8.08   LCD                                                                   04/21/2016 02:22:52 PAGE 3   

 118   1              WriteDataToLCD( (pTimeArray[0]%10)+0x30 );
 119   1      
 120   1              //Display Space
 121   1              WriteDataToLCD(' ');
 122   1      
 123   1              // Display mode
 124   1              switch(pTimeArray[3])
 125   1              {
 126   2              case AM_Time:   WriteStringToLCD("AM"); break;
 127   2              case PM_Time:   WriteStringToLCD("PM"); break;
 128   2      
 129   2              default: WriteDataToLCD('H');   break;
 130   2              }
 131   1      }
 132          
 133          
 134          
 135          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    401    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
